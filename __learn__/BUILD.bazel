load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_files", "strip_prefix")
load("//bazel:cc_proto_library.bzl", "cc_proto_library")
load("//bazel:java_lite_proto_library.bzl", "java_lite_proto_library")
load("//bazel:java_proto_library.bzl", "java_proto_library")
load("//bazel:proto_library.bzl", "proto_library")
load("//bazel/toolchains:proto_lang_toolchain.bzl", "proto_lang_toolchain")
load("//build_defs:cpp_opts.bzl", "COPTS", "LINK_OPTS")
load(":protobuf.bzl", "internal_objc_proto_library", "internal_php_proto_library", "internal_py_proto_library")

licenses(["notice"])

exports_files(["LICENSE"])

# Well Known Types Proto Library rules
# https://developers.google.com/protocol-buffers/docs/reference/google.protobuf
# Can be used with one of the language specific proto library rules i.e. java_proto_library:
#
# java_proto_library(
#   name = "any_java_proto",
#   deps = ["@com_google_protobuf//:any_proto"],
# )

alias(
  name = "any_proto",
  actual = "//src/google/protobuf:any_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "api_proto",
  actual = "//src/google/protobuf:api_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "duration_proto",
  actual = "//src/google/protobuf:duration_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "empty_proto",
  actual = "//src/google/protobuf:empty_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "field_mask_proto",
  actual = "//src/google/protobuf:field_mask_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "source_context_proto",
  actual = "//src/google/protobuf:source_context_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "struct_proto",
  actual = "//src/google/protobuf:struct_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "timestamp_proto",
  actual = "//src/google/protobuf:timestamp_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "type_proto",
  actual = "//src/google/protobuf:type_proto",
  visibility = ["//visibility:public"],
)

alias(
  name = "wrappers_proto",
  actual = "//src/google/protobuf:wrappers_proto",
  visibility = ["//visibility:public"],
)

# Source files - aliases to a filegroup, not a 'proto_library' - internal stuff
alias(
  name = "lite_well_known_protos",
  actual = "//src/google/protobuf:well_known_type_protos",  # filegroup
  visibility = ["//visibility:public"],
)

alias(
  name = "well_known_type_protos",
  actual = "//src/google/protobuf:well_known_type_protos",  # filegroup
  visibility = ["//visibility:public"],
)

# internal runtime protos - they're not well-known types
alias(
  name = "descriptor_proto",
  actual = "//src/google/protobuf:descriptor_proto",  # proto_library
  visibility = ["//visibility:public"],
)

alias(
  name = "descriptor_proto_srcs",
  actual = "//src/google/protobuf:descriptor_proto_srcs",  # filegroup
  visibility = ["//visibility:public"],
)

alias(
  name = "compiler_plugin_proto",
  actual = "//src/google/protobuf/compiler:plugin_proto",  # proto_library
  visibility = ["//visibility:public"],
)

cc_library(
  name = "cc_wkt_protos",
  deprecation = "Only for backward compatibility; please avoid",
  visibility = ["//visibility:public"],
)

# deprecated source protos typically part of the protobuf runtime
# As an alternative try :well_known_type_protos (Well-Known Types) https://developers.google.com/protocol-buffers/docs/reference/google.protobuf
# For descriptor.proto (source) try :descriptor_proto(_srcs)
# For compiler/plugin.proto try :compiler_plugin_proto
filegroup(
  name = "well_known_protos",
  srcs = [
    ":descriptor_proto_srcs",
    ":well_known_type_protos",
    "//src/google/protobuf/compiler:plugin.proto",
  ],
  deprecation = "We recommend using :well_known_type_protos as an alternative",
  visibility = ["//visibility:public"],
)

internal_ruby_proto_library(
  name = "well_known_ruby_protos",
  srcs = [":well_known_protos"],
  includes = ["src"],
  default_runtime = "",
  visibility = [
    "//conformance:__pkg__",
    "//ruby:__subpackages__",
  ],
)

# Compiler
alias(
  name = "protoc_lib",
  actual = "//src/google/protobuf/compiler:protoc_lib",
  visibility = ["//visibility:public"],
)

cc_binary(
  name = "protoc",
  copts = COPTS,
  linkopts = LINK_OPTS + PROTOC_LINK_OPTS,
  visibility = ["//visibility:public"],
  deps = ["//src/google/protobuf/compiler:protoc_lib"],
)

# C++ runtime
# "lite" runtime works for .proto files that have this setting enabled: optimize_for = LITE_RUNTIME
# This runtime excludes the `Reflection` APIs (which includes `Descriptor` etc) or Well-Known Types
# Please see:
# https://developers.google.com/protocol-buffers/docs/reference/cpp-generated#message
# https://developers.google.com/protocol-buffers/docs/reference/google.protobuf
alias(
  name = "protobuf_lite",
  actual = "//src/google/protobuf:protobuf_lite",
  visibility = ["//visibility:public"],
)

cc_library(
  name = "protobuf",
  hdrs = glob([
    "src/**/*.h",
    "src/**/*.inc",
  ]),
  copts = COPTS,
  include_prefix = "google/protobuf/io",
  linkopts = LINK_OPTS,
  visibility = ["//visibility:public"],
  deps = [
    "//src/google/protobuf",
    "//src/google/protobuf/compiler:importer",
    "//src/google/protobuf/util:delimited_message_util",
    "//src/google/protobuf/util:differencer",
    "//src/google/protobuf/util:field_mask_util",
    "//src/google/protobuf/util:json_util",
    "//src/google/protobuf/util:time_util",
    "//src/google/protobuf/util:type_resolver_util",
  ],
)

# Provide just header files for projects that need to create shared libraries for dynamic loading
# Stopgap measure until Bazel supports this use case natively
# @TODO: Remove when Bazel supports this out of the box
alias(
  name = "protobuf_headers",
  actual = "//src/google/protobuf:protobuf_headers",
  visibility = ["//visibility:public"],
)

alias(
  name = "json",
  actual = "//src/google/protobuf/json",
  visibility = ["//visibility:public"],
)

# Java
alias(
  name = "protobuf_java",
  actual = "//java/core",
  visibility = ["//visibility:public"],
)

alias(
  name = "protobuf_javalite",
  actual = "//java/lite",
  visibility = ["//visibility:public"],
)

alias(
  name = "protobuf_java_util",
  actual = "//java/util",
  visibility = ["//visibility:public"],
)

alias(
  name = "java_toolchain",
  actual = "//java/core:toolchain",
  visibility = ["//visibility:public"],
)

alias(
  name = "javalite_toolchain",
  actual = "//java/lite:toolchain",
  visibility = ["//visibility:public"],
)

# python
alias(
  name = "protobuf_python",
  actual = "//python:protobuf_python",
  visibility = ["//visibility:public"],
)

alias(
  name = "python_srcs",
  actual = "//python:python_srcs",
  visibility = ["@upb//:__subpackages__"],
)

alias(
  name = "python_test_srcs",
  actual = "//python:python_test_srcs",
  visibility = ["@upb//:__subpackages__"],
)

alias(
  name = "well_known_types_py_pb2",
  actual = "//python:well_known_types_py_pb2",
  visibility = ["//visibility:public"],
)

alias(
  name = "python_common_test_protos",
  actual = "//python:python_common_test_protos",
  visibility = ["//visibility:public"],
)

alias(
  name = "python_specific_test_protos",
  actual = "//python:python_specific_test_protos",
  visibility = ["//visibility:public"],
)

proto_lang_toolchain(
  name = "cc_toolchain",
  blacklisted_protos = [
    "//:compiler_plugin_proto",
    "//:descriptor_proto",
  ],
  command_line = "--cpp_out=$(OUT)",
  runtime = ":protobuf",
  visibility = ["//visibility:public"],
)

# Objective C
alias(
  name = "objectivec",
  actual = "//objectivec",
  tags = ["manual"],
  visibility = ["//visibility:public"],
)

alias(
  name = "protobuf_objc",
  actual = "//objectivec",
  tags = ["manual"],
  visibility = ["//visibility:public"],
)

# Test Protos
alias(
  name = "lite_test_proto_srcs",
  actual = "//src/google/protobuf:lite_test_proto_srcs", # proto_library
  visibility = ["//:__subpackages__"],
)

alias(
  name = "lite_test_protos",
  actual = "//src/google/protobuf:lite_test_protos", # proto_library
  visibility = ["//:__subpackages__"],
)

alias(
  name = "test_proto_srcs",
  actual = "//src/google/protobuf:test_proto_srcs", # filegroup
  visibility = ["//:__subpackages__"],
)

alias(
  name = "test_protos",
  actual = "//src/google/protobuf:test_protos", # proto_library
  visibility = ["//:__subpackages__"],
)

# generated proto source input validation
genrule(
  name = "generated_protos",
  testonly = 1,
  srcs = ["//src/google/protobuf:test_proto_srcs"],
  outs = ["unittest_gen_import.proto"],
  cmd = "cat src/google/protobuf/unittest_import.proto > $@",
)

proto_library(
  name = "generated_protos_proto",
  testonly = 1,
  srcs = [":generated_protos"],
  deps = ["//src/google/protobuf:generic_test_protos"],
)

internal_py_proto_library(
  name = "generated_protos_py",
  testonly = 1,
  srcs = [":generated_protos"],
  default_runtime = "",
  protoc = ":protoc",
  deps = ["//python:python_common_test_protos"],
)

# tests for conformance

cc_proto_library(
  name = "test_messages_proto2_cc_proto",
  visibility = [
    "//conformance:__pkg__",
    "//src:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto2_proto"],
)

cc_proto_library(
  name = "test_messages_proto3_cc_proto",
  visibility = [
    "//conformance:__pkg__",
    "//src:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto3_proto"],
)

java_proto_library(
  name = "test_messages_proto2_java_proto",
  visibility = [
    "//conformance:__pkg__",
    "//java:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto2_proto"],
)

java_proto_library(
  name = "test_messages_proto3_java_proto",
  visibility = [
    "//conformance:__pkg__",
    "//java:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto3_proto"],
)

java_lite_proto_library(
  name = "test_messages_proto2_java_proto_lite",
  visibility = [
    "//conformance:__pkg__",
    "//java:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto2_proto"],
)

java_lite_proto_library(
  name = "test_messages_proto3_java_proto_lite",
  visibility = [
    "//conformance:__pkg__",
    "//java:__subpackages__",
  ],
  deps = ["//src/google/protobuf:test_messages_proto3_proto"],
)

internal_objc_proto_library(
  name = "test_messages_proto2_objc_proto",
  testonly = 1,
  srcs = ["//src/google/protobuf:test_messages_proto2.proto"],
  includes = ["src/google/protobuf"],
  visibility = [
    "//conformance:__pkg__",
    "//objectivec:__subpackages__",
  ],
)

internal_objc_proto_library(
  name = "test_messages_proto3_objc_proto",
  testonly = 1,
  srcs = ["//src/google/protobuf:test_messages_proto3.proto"],
  includes = [
    "src/google/protobuf", # this must be first
    "src",
  ],
  proto_deps = [":well_known_protos"],
  visibility = [
    "//conformance:__pkg__",
    "//objectivec:__subpackages__",
  ],
)